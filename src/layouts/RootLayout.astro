---
import "@fontsource-variable/fira-code";
import "@/styles/globals.css";

import { ViewTransitions } from "astro:transitions";
import ModeSwitch from "@/components/ModeSwitch.astro";
import { STATUS_LINE, THEME } from "@/constants";
import type { MarkdownHeading } from "astro";

export interface Props {
	path: string;
	title?: string;
	description?: string;
	toc?: MarkdownHeading[];
}

const { path, title, description } = Astro.props;
---

<!doctype html>
<html lang="en" transition:animate="none" data-theme={THEME}>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta charset="utf-8" />
		<link
			rel="alternate"
			type="application/rss+xml"
			title="blog.cstef.dev RSS Feed"
			href={new URL("rss.xml", Astro.site)}
		/>
		<title>{title ? title : "cstef's Digital Garden"}</title>
		<meta name="description" content={description} />
		<script
			defer
			is:inline
			src="https://cloud.umami.is/script.js"
			data-website-id="74a3da64-cfd7-4913-8918-46a139df3117"></script>
		<script is:inline>
			const setMode = () => {
				console.log("setMode");
				const mode = (() => {
					if (typeof localStorage !== "undefined" && localStorage.getItem("mode")) {
						return localStorage.getItem("mode");
					}
					if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
						return "dark";
					}
					return "light";
				})();

				document.documentElement.classList.toggle("dark", mode === "dark");

				window.localStorage.setItem("mode", mode || "light");
			};

			setMode();

			document.addEventListener("astro:after-swap", setMode);
		</script>
		<ViewTransitions />
	</head>
	<body>
		<div class="fixed top-0 left-0 w-full bg-accent flex z-10">
			{
				STATUS_LINE.user && (
					<a href="/">
						<div class="bg-primary text-primary-foreground px-4 md:py-2 py-1 w-fit font-black">
							{STATUS_LINE.user}
						</div>
					</a>
				)
			}
			{
				STATUS_LINE.path !== false && (
					<div class="bg-secondary text-secondary-foreground px-4 md:py-2 py-1 w-fit truncate">
						{path}
					</div>
				)
			}

			<div class="flex-grow"></div>
			{
				STATUS_LINE.scroll !== false && (
					<div
						class="bg-secondary text-secondary-foreground px-4 md:py-2 py-1 w-fit font-black"
						id="scroll"
					>
						TOP
					</div>
				)
			}
			<div class="bg-primary text-primary-foreground px-4 md:py-2 py-1 w-fit">
				<ModeSwitch transition:persist />
			</div>
		</div>

		<main class="mb-24" transition:animate="initial">
			<slot />
		</main>
	</body>
</html>

<script is:inline define:vars={{ STATUS_LINE }}>
	const setScroll = () => {
		const scroll = document.getElementById("scroll");
		if (!scroll) return;
		if (window.scrollY <= 0) {
			scroll.innerText = "TOP";
			return;
		}
		let percent = Math.floor(
			(window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
		);
		// Clamp to 100
		percent = Math.min(percent, 100);
		if (percent === 100) {
			scroll.innerText = "END";
			return;
		} else if (percent <= 0) {
			scroll.innerText = "TOP";
			return;
		}
		scroll.innerText = `${percent}%`;
	};

	if (STATUS_LINE.scroll !== false) {
		setScroll();
		window.addEventListener("scroll", setScroll);
		document.addEventListener("astro:after-swap", setScroll);
	}
	const setTime = () => {
		const time = document.getElementById("time");
		if (!time) return console.log("no time");
		time.innerText = new Date().toLocaleTimeString();
	};

	if (STATUS_LINE.time !== false) {
		setTime();

		setInterval(() => {
			setTime();
		}, 1000);

		window.addEventListener("astro:after-swap", setTime);
	}

	const setConnection = () => {
		const connection = document.getElementById("connection");
		if (!connection) return;
		connection.innerText = navigator.onLine ? "ONLINE" : "OFFLINE";
		if (navigator.onLine) {
			connection.classList.remove("bg-destructive/70");
			connection.classList.add("bg-success/70");
		} else {
			connection.classList.remove("bg-success/70");
			connection.classList.add("bg-destructive/70");
		}
	};

	if (STATUS_LINE.connection !== false) {
		setConnection();
		window.addEventListener("online", setConnection);
		window.addEventListener("offline", setConnection);
		document.addEventListener("astro:after-swap", setConnection);
	}

	// vim keybindings
	document.addEventListener("keydown", (event) => {
		switch (event.key) {
			case "h":
				if (window.history.length > 1) {
					window.history.back();
				}
				break;
			case "l":
				window.history.forward();
				break;
			case "j":
				window.scrollBy(0, 100);
				break;
			case "k":
				window.scrollBy(0, -100);
				break;
			case "g":
				window.scrollTo({
					behavior: "smooth",
					top: 0,
				});
				break;
			case "G":
				window.scrollTo({
					behavior: "smooth",
					top: document.body.scrollHeight,
				});
				break;
		}
	});
</script>

<script>
	import twemoji from "twemoji";
	// Replace all emojis with Twemoji images
	const parse = () => {
		twemoji.parse(document.body, {
			folder: "svg",
			ext: ".svg",
			base: "https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/",
		});
	};
	parse();
	document.addEventListener("DOMContentLoaded", parse);
	document.addEventListener("astro:after-swap", parse);
</script>

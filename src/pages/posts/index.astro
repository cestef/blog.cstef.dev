---
import { HIDE_SEED_IN_PROD, STATE_EMOJI } from "@/constants";
import Prose from "@/layouts/Prose.astro";
import RootLayout from "@/layouts/RootLayout.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

const isProd = import.meta.env.PROD;
const posts = (await getCollection("blog"))
	.filter((e) => (isProd && HIDE_SEED_IN_PROD ? e.data.growth !== "seed" : true))
	.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
const postsByYear = posts.reduce(
	(acc, post) => {
		const year = post.data.date.getFullYear();
		if (!acc[year]) {
			acc[year] = [];
		}
		acc[year].push(post);
		return acc;
	},
	{} as Record<number, typeof posts>
);
---

<RootLayout path="/posts">
	<Prose>
		<div class="flex flex-row items-center mt-0">
			<h1>Posts</h1>
			<div class="flex-grow"></div>
			<div class="flex gap-2 items-center justify-center">
				<Icon
					name="octicon:list-unordered-16"
					class="text-muted-foreground cursor-pointer"
					onclick="list();"
				/>
				|
				<Icon
					name="octicon:rows-16"
					class="text-muted-foreground cursor-pointer"
					onclick="grid();"
				/>
			</div>
		</div>
		<p>Here are all the posts I've written. Enjoy!</p>

		{
			Object.entries(postsByYear)
				.sort((a, b) => parseInt(b[0]) - parseInt(a[0]))
				.map(([year, posts]) => (
					<section>
						<h2 class="!mt-6">{year}</h2>
						<div class="grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 hidden grid-el">
							{posts.map((post) => (
								<div class="border border-muted p-3 rounded-md flex flex-col justify-between h-full relative">
									<div>
										<a
											href={`/posts/${post.id}`}
											class="underline-offset-2 decoration-2 mb-1 lg:mb-3 block no-underline text-base xl:text-lg title"
										>
											{post.data.title.trim()}
										</a>
									</div>
									<div class="flex gap-2 items-center justify-between">
										<span class="text-muted-foreground block mb-0 text-sm">
											{post.data.date.toLocaleDateString()}
										</span>
										<a
											href={`/growths/${post.data.growth}`}
											class="bg-accent text-accent-foreground px-1 py-0.5 rounded-md text-xs lg:text-sm xl:text-base font-bold no-underline"
										>
											{STATE_EMOJI[post.data.growth]}
										</a>
									</div>
								</div>
							))}
						</div>
						<ul class="hidden list-el">
							{posts.map((post) => (
								<li>
									<div>
										<h4 class="flex items-center gap-2 md:gap-4">
											<a
												href={`/posts/${post.id}`}
												data-astro-prefetch
												class="underline-offset-2 decoration-2 max-w-[70%] w-fit"
											>
												{post.data.title.trim()}
											</a>{" "}
											<div class="flex-grow" />{" "}
											<div class="flex-wrap flex items-center justify-center gap-y-2 gap-x-4">
												<span class="text-sm text-muted-foreground">
													{post.data.date.toLocaleDateString() ||
														post.data.date.toLocaleDateString()}
												</span>{" "}
												<a
													href={`/growths/${post.data.growth}`}
													class="bg-accent text-accent-foreground px-2 py-1 rounded-md text-sm w-fit font-bold no-underline hidden sm:block"
												>
													{STATE_EMOJI[post.data.growth]}
												</a>
											</div>
										</h4>
									</div>
								</li>
							))}
						</ul>
					</section>
				))
		}
	</Prose>
</RootLayout>

<script is:inline>
	function main() {
		const cache = {
			get(key) {
				return JSON.parse(localStorage.getItem(key));
			},
			set(key, value) {
				localStorage.setItem(key, JSON.stringify(value));
			},
		};
		const gridEls = document.querySelectorAll(".grid-el");
		const listEls = document.querySelectorAll(".list-el");

		function grid() {
			for (const el of gridEls) {
				el.classList.remove("hidden");
				el.classList.add("grid");
			}
			for (const el of listEls) {
				el.classList.add("hidden");
			}

			cache.set("state", "grid");
		}

		function list() {
			for (const el of gridEls) {
				el.classList.add("hidden");
			}
			for (const el of listEls) {
				el.classList.remove("hidden");
			}

			cache.set("state", "list");
		}

		const update = () => {
			const state = cache.get("state");
			switch (state) {
				case "list":
					list();
					break;
				case "grid":
				default:
					grid();
					break;
			}
		};

		update();
		document.addEventListener("astro:after-swap", update);
	}

	main();
</script>
